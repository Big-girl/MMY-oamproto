// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: plat.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 获取平台域名的请求参数
type GetPlatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
}

func (x *GetPlatRequest) Reset() {
	*x = GetPlatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatRequest) ProtoMessage() {}

func (x *GetPlatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatRequest.ProtoReflect.Descriptor instead.
func (*GetPlatRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlatRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

// 返回的数据结构响应参数
type IpAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据端口
	Dport string `protobuf:"bytes,1,opt,name=dport,proto3" json:"dport,omitempty"`
	// 文件端口
	Fport string `protobuf:"bytes,2,opt,name=fport,proto3" json:"fport,omitempty"`
	// ip或者域名
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// 是否本地化部署
	Islocal int32 `protobuf:"varint,4,opt,name=islocal,proto3" json:"islocal,omitempty"`
	// 是否OSS保存文件
	Isoss int32 `protobuf:"varint,5,opt,name=isoss,proto3" json:"isoss,omitempty"`
}

func (x *IpAddr) Reset() {
	*x = IpAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddr) ProtoMessage() {}

func (x *IpAddr) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddr.ProtoReflect.Descriptor instead.
func (*IpAddr) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{1}
}

func (x *IpAddr) GetDport() string {
	if x != nil {
		return x.Dport
	}
	return ""
}

func (x *IpAddr) GetFport() string {
	if x != nil {
		return x.Fport
	}
	return ""
}

func (x *IpAddr) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpAddr) GetIslocal() int32 {
	if x != nil {
		return x.Islocal
	}
	return 0
}

func (x *IpAddr) GetIsoss() int32 {
	if x != nil {
		return x.Isoss
	}
	return 0
}

// 获取平台服务器的ip或者域名的响应参数
type GetServerIpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// ip域名参数
	Ipaddr *IpAddr `protobuf:"bytes,2,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
}

func (x *GetServerIpReply) Reset() {
	*x = GetServerIpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerIpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerIpReply) ProtoMessage() {}

func (x *GetServerIpReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerIpReply.ProtoReflect.Descriptor instead.
func (*GetServerIpReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{2}
}

func (x *GetServerIpReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetServerIpReply) GetIpaddr() *IpAddr {
	if x != nil {
		return x.Ipaddr
	}
	return nil
}

// 创建平台账号的请求参数
type AddPlatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台信息
	Plat *PlatInfo `protobuf:"bytes,11,opt,name=plat,proto3" json:"plat,omitempty"`
	// 授权license信息
	List []*PlatLicenseLog `protobuf:"bytes,12,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AddPlatRequest) Reset() {
	*x = AddPlatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPlatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPlatRequest) ProtoMessage() {}

func (x *AddPlatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPlatRequest.ProtoReflect.Descriptor instead.
func (*AddPlatRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{3}
}

func (x *AddPlatRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *AddPlatRequest) GetPlat() *PlatInfo {
	if x != nil {
		return x.Plat
	}
	return nil
}

func (x *AddPlatRequest) GetList() []*PlatLicenseLog {
	if x != nil {
		return x.List
	}
	return nil
}

// 平台账号的响应
type PlatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 提示信息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 影响行数
	Affectedrows int64 `protobuf:"varint,3,opt,name=affectedrows,proto3" json:"affectedrows,omitempty"`
}

func (x *PlatReply) Reset() {
	*x = PlatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatReply) ProtoMessage() {}

func (x *PlatReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatReply.ProtoReflect.Descriptor instead.
func (*PlatReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{4}
}

func (x *PlatReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlatReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PlatReply) GetAffectedrows() int64 {
	if x != nil {
		return x.Affectedrows
	}
	return 0
}

// 平台授权结构
type PlatLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台id
	Platid string `protobuf:"bytes,1,opt,name=platid,proto3" json:"platid,omitempty"`
	// 授权类型
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// 授权数量
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// 已使用点数
	Usecount int64 `protobuf:"varint,4,opt,name=usecount,proto3" json:"usecount,omitempty"`
}

func (x *PlatLicense) Reset() {
	*x = PlatLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatLicense) ProtoMessage() {}

func (x *PlatLicense) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatLicense.ProtoReflect.Descriptor instead.
func (*PlatLicense) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{5}
}

func (x *PlatLicense) GetPlatid() string {
	if x != nil {
		return x.Platid
	}
	return ""
}

func (x *PlatLicense) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PlatLicense) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PlatLicense) GetUsecount() int64 {
	if x != nil {
		return x.Usecount
	}
	return 0
}

// 创建平台授权的请求参数
type AddPlatLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台授权列表
	List []*PlatLicense `protobuf:"bytes,20,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AddPlatLicenseRequest) Reset() {
	*x = AddPlatLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPlatLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPlatLicenseRequest) ProtoMessage() {}

func (x *AddPlatLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPlatLicenseRequest.ProtoReflect.Descriptor instead.
func (*AddPlatLicenseRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{6}
}

func (x *AddPlatLicenseRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *AddPlatLicenseRequest) GetList() []*PlatLicense {
	if x != nil {
		return x.List
	}
	return nil
}

// 发送激活码和激活平台信息请求
type ActivePlatInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 传输的激活数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ActivePlatInfoRequest) Reset() {
	*x = ActivePlatInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePlatInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePlatInfoRequest) ProtoMessage() {}

func (x *ActivePlatInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePlatInfoRequest.ProtoReflect.Descriptor instead.
func (*ActivePlatInfoRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{7}
}

func (x *ActivePlatInfoRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *ActivePlatInfoRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 激活平台返回的数据
type ActivePlatInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回的激活数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ActivePlatInfoReply) Reset() {
	*x = ActivePlatInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePlatInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePlatInfoReply) ProtoMessage() {}

func (x *ActivePlatInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePlatInfoReply.ProtoReflect.Descriptor instead.
func (*ActivePlatInfoReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{8}
}

func (x *ActivePlatInfoReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ActivePlatInfoReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息,用于平台信息更新与同步
type GetPlatInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台id、手机号加密数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPlatInfoRequest) Reset() {
	*x = GetPlatInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatInfoRequest) ProtoMessage() {}

func (x *GetPlatInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPlatInfoRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{9}
}

func (x *GetPlatInfoRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *GetPlatInfoRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息的响应数据
type GetPlatInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回加密的平台数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPlatInfoReply) Reset() {
	*x = GetPlatInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatInfoReply) ProtoMessage() {}

func (x *GetPlatInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatInfoReply.ProtoReflect.Descriptor instead.
func (*GetPlatInfoReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{10}
}

func (x *GetPlatInfoReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPlatInfoReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息,用于平台信息更新与同步
type GetPlatLicenseInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台id、平台授权id加密数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPlatLicenseInfoRequest) Reset() {
	*x = GetPlatLicenseInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatLicenseInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatLicenseInfoRequest) ProtoMessage() {}

func (x *GetPlatLicenseInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatLicenseInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPlatLicenseInfoRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{11}
}

func (x *GetPlatLicenseInfoRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *GetPlatLicenseInfoRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息的响应数据
type GetPlatLicenseInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回加密的平台授权信息
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPlatLicenseInfoReply) Reset() {
	*x = GetPlatLicenseInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatLicenseInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatLicenseInfoReply) ProtoMessage() {}

func (x *GetPlatLicenseInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatLicenseInfoReply.ProtoReflect.Descriptor instead.
func (*GetPlatLicenseInfoReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{12}
}

func (x *GetPlatLicenseInfoReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPlatLicenseInfoReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息,用于平台信息更新与同步
type UpdatePlatInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台id、手机号加密数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePlatInfoRequest) Reset() {
	*x = UpdatePlatInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlatInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlatInfoRequest) ProtoMessage() {}

func (x *UpdatePlatInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlatInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlatInfoRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{13}
}

func (x *UpdatePlatInfoRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *UpdatePlatInfoRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息的响应数据
type UpdatePlatInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回加密的平台数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePlatInfoReply) Reset() {
	*x = UpdatePlatInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlatInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlatInfoReply) ProtoMessage() {}

func (x *UpdatePlatInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlatInfoReply.ProtoReflect.Descriptor instead.
func (*UpdatePlatInfoReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{14}
}

func (x *UpdatePlatInfoReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdatePlatInfoReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息,用于平台信息更新与同步
type UpdatePlatLicenseInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台id、平台授权id加密数据
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePlatLicenseInfoRequest) Reset() {
	*x = UpdatePlatLicenseInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlatLicenseInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlatLicenseInfoRequest) ProtoMessage() {}

func (x *UpdatePlatLicenseInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlatLicenseInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlatLicenseInfoRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{15}
}

func (x *UpdatePlatLicenseInfoRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *UpdatePlatLicenseInfoRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取平台信息的响应数据
type UpdatePlatLicenseInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回加密的平台授权信息
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePlatLicenseInfoReply) Reset() {
	*x = UpdatePlatLicenseInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlatLicenseInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlatLicenseInfoReply) ProtoMessage() {}

func (x *UpdatePlatLicenseInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlatLicenseInfoReply.ProtoReflect.Descriptor instead.
func (*UpdatePlatLicenseInfoReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{16}
}

func (x *UpdatePlatLicenseInfoReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdatePlatLicenseInfoReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 给已经存在的平台授权添加点数
type BuyPlatLicenseCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台id
	Platid string `protobuf:"bytes,2,opt,name=platid,proto3" json:"platid,omitempty"`
	// 授权类型
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 购买的点数
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BuyPlatLicenseCountRequest) Reset() {
	*x = BuyPlatLicenseCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyPlatLicenseCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyPlatLicenseCountRequest) ProtoMessage() {}

func (x *BuyPlatLicenseCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyPlatLicenseCountRequest.ProtoReflect.Descriptor instead.
func (*BuyPlatLicenseCountRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{17}
}

func (x *BuyPlatLicenseCountRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *BuyPlatLicenseCountRequest) GetPlatid() string {
	if x != nil {
		return x.Platid
	}
	return ""
}

func (x *BuyPlatLicenseCountRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BuyPlatLicenseCountRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 获取平台域名地址的请求
type GetPlatDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每个接口都需要的校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台id
	Platid string `protobuf:"bytes,2,opt,name=platid,proto3" json:"platid,omitempty"`
}

func (x *GetPlatDomainRequest) Reset() {
	*x = GetPlatDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatDomainRequest) ProtoMessage() {}

func (x *GetPlatDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatDomainRequest.ProtoReflect.Descriptor instead.
func (*GetPlatDomainRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{18}
}

func (x *GetPlatDomainRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *GetPlatDomainRequest) GetPlatid() string {
	if x != nil {
		return x.Platid
	}
	return ""
}

// 返回平台的域名地址
type GetPlatDomainReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 平台的域名地址
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GetPlatDomainReply) Reset() {
	*x = GetPlatDomainReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatDomainReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatDomainReply) ProtoMessage() {}

func (x *GetPlatDomainReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatDomainReply.ProtoReflect.Descriptor instead.
func (*GetPlatDomainReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{19}
}

func (x *GetPlatDomainReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPlatDomainReply) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// 平台的基本信息
type PlatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 平台名称
	Platname string `protobuf:"bytes,2,opt,name=platname,proto3" json:"platname,omitempty"`
	// 联系人
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 手机号
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// 平台域名
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	// 创建时间
	Createtime int64 `protobuf:"varint,6,opt,name=createtime,proto3" json:"createtime,omitempty"`
	// 是否激活
	Isactive bool `protobuf:"varint,7,opt,name=isactive,proto3" json:"isactive,omitempty"`
	// 备注
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *PlatInfo) Reset() {
	*x = PlatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatInfo) ProtoMessage() {}

func (x *PlatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatInfo.ProtoReflect.Descriptor instead.
func (*PlatInfo) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{20}
}

func (x *PlatInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlatInfo) GetPlatname() string {
	if x != nil {
		return x.Platname
	}
	return ""
}

func (x *PlatInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlatInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PlatInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PlatInfo) GetCreatetime() int64 {
	if x != nil {
		return x.Createtime
	}
	return 0
}

func (x *PlatInfo) GetIsactive() bool {
	if x != nil {
		return x.Isactive
	}
	return false
}

func (x *PlatInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 获取平台列表的请求接口
type ListPlatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 条件：平台/联系人/联系电话
	Condition string `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	// 平台名称
	Platname string `protobuf:"bytes,12,opt,name=platname,proto3" json:"platname,omitempty"`
	// 联系人
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// 手机号
	Phone string `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`
	// 创建时间：开始时间
	Start int64 `protobuf:"varint,15,opt,name=start,proto3" json:"start,omitempty"`
	// 创建时间：结束时间
	End int64 `protobuf:"varint,16,opt,name=end,proto3" json:"end,omitempty"`
	// 是否被激活
	Isactive int32 `protobuf:"varint,17,opt,name=isactive,proto3" json:"isactive,omitempty"`
	// 平台id
	Id string `protobuf:"bytes,18,opt,name=id,proto3" json:"id,omitempty"`
	// 其他参数
	// 分页参数：第几页
	Pageindex int64 `protobuf:"varint,20,opt,name=pageindex,proto3" json:"pageindex,omitempty"`
	// 分页参数：几条数据
	Pagelimit int64 `protobuf:"varint,21,opt,name=pagelimit,proto3" json:"pagelimit,omitempty"`
}

func (x *ListPlatRequest) Reset() {
	*x = ListPlatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlatRequest) ProtoMessage() {}

func (x *ListPlatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlatRequest.ProtoReflect.Descriptor instead.
func (*ListPlatRequest) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{21}
}

func (x *ListPlatRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *ListPlatRequest) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *ListPlatRequest) GetPlatname() string {
	if x != nil {
		return x.Platname
	}
	return ""
}

func (x *ListPlatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPlatRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ListPlatRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ListPlatRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ListPlatRequest) GetIsactive() int32 {
	if x != nil {
		return x.Isactive
	}
	return 0
}

func (x *ListPlatRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPlatRequest) GetPageindex() int64 {
	if x != nil {
		return x.Pageindex
	}
	return 0
}

func (x *ListPlatRequest) GetPagelimit() int64 {
	if x != nil {
		return x.Pagelimit
	}
	return 0
}

// 获取平台列表的响应参数
type ListPlatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据列表
	List []*PlatInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 符合条件的总条数
	Totalcount int64 `protobuf:"varint,2,opt,name=totalcount,proto3" json:"totalcount,omitempty"`
}

func (x *ListPlatReply) Reset() {
	*x = ListPlatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlatReply) ProtoMessage() {}

func (x *ListPlatReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlatReply.ProtoReflect.Descriptor instead.
func (*ListPlatReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{22}
}

func (x *ListPlatReply) GetList() []*PlatInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListPlatReply) GetTotalcount() int64 {
	if x != nil {
		return x.Totalcount
	}
	return 0
}

// 获取平台信息详情的响应参数
type GetOamPlatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台信息
	Plat *PlatInfo `protobuf:"bytes,1,opt,name=plat,proto3" json:"plat,omitempty"`
	// 平台对应的license信息
	List []*PlatLicense `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetOamPlatReply) Reset() {
	*x = GetOamPlatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOamPlatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOamPlatReply) ProtoMessage() {}

func (x *GetOamPlatReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOamPlatReply.ProtoReflect.Descriptor instead.
func (*GetOamPlatReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{23}
}

func (x *GetOamPlatReply) GetPlat() *PlatInfo {
	if x != nil {
		return x.Plat
	}
	return nil
}

func (x *GetOamPlatReply) GetList() []*PlatLicense {
	if x != nil {
		return x.List
	}
	return nil
}

// 平台授权操作日志
type PlatLicenseLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台id:新增和修改的时候需要填的参数
	Platid string `protobuf:"bytes,1,opt,name=platid,proto3" json:"platid,omitempty"`
	// 授权类型:新增和修改的时候需要填的参数
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// 追加数量:新增和修改的时候需要填的参数
	Appendcount int64 `protobuf:"varint,3,opt,name=appendcount,proto3" json:"appendcount,omitempty"`
	// 赠送数量:新增和修改的时候需要填的参数
	Giftcount int64 `protobuf:"varint,4,opt,name=giftcount,proto3" json:"giftcount,omitempty"`
	// 授权总数量
	Count int64 `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`
	// 已经使用了的数量
	Usecount int64 `protobuf:"varint,12,opt,name=usecount,proto3" json:"usecount,omitempty"`
	// 从哪里产生的这条操作日志
	From string `protobuf:"bytes,13,opt,name=from,proto3" json:"from,omitempty"`
	// 操作时间
	Createtime int64 `protobuf:"varint,14,opt,name=createtime,proto3" json:"createtime,omitempty"`
}

func (x *PlatLicenseLog) Reset() {
	*x = PlatLicenseLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatLicenseLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatLicenseLog) ProtoMessage() {}

func (x *PlatLicenseLog) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatLicenseLog.ProtoReflect.Descriptor instead.
func (*PlatLicenseLog) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{24}
}

func (x *PlatLicenseLog) GetPlatid() string {
	if x != nil {
		return x.Platid
	}
	return ""
}

func (x *PlatLicenseLog) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PlatLicenseLog) GetAppendcount() int64 {
	if x != nil {
		return x.Appendcount
	}
	return 0
}

func (x *PlatLicenseLog) GetGiftcount() int64 {
	if x != nil {
		return x.Giftcount
	}
	return 0
}

func (x *PlatLicenseLog) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PlatLicenseLog) GetUsecount() int64 {
	if x != nil {
		return x.Usecount
	}
	return 0
}

func (x *PlatLicenseLog) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *PlatLicenseLog) GetCreatetime() int64 {
	if x != nil {
		return x.Createtime
	}
	return 0
}

// 平台授权操作日志的查询信息
type PlatLicenseLogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 校验参数
	Co *CheckObj `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	// 平台id:新增和修改的时候需要填的参数
	Platid string `protobuf:"bytes,11,opt,name=platid,proto3" json:"platid,omitempty"`
	// 其他参数
	// 分页参数：第几页
	Pageindex int64 `protobuf:"varint,21,opt,name=pageindex,proto3" json:"pageindex,omitempty"`
	// 分页参数：几条数据
	Pagelimit int64 `protobuf:"varint,22,opt,name=pagelimit,proto3" json:"pagelimit,omitempty"`
}

func (x *PlatLicenseLogQuery) Reset() {
	*x = PlatLicenseLogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatLicenseLogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatLicenseLogQuery) ProtoMessage() {}

func (x *PlatLicenseLogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatLicenseLogQuery.ProtoReflect.Descriptor instead.
func (*PlatLicenseLogQuery) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{25}
}

func (x *PlatLicenseLogQuery) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *PlatLicenseLogQuery) GetPlatid() string {
	if x != nil {
		return x.Platid
	}
	return ""
}

func (x *PlatLicenseLogQuery) GetPageindex() int64 {
	if x != nil {
		return x.Pageindex
	}
	return 0
}

func (x *PlatLicenseLogQuery) GetPagelimit() int64 {
	if x != nil {
		return x.Pagelimit
	}
	return 0
}

type ListLicenseLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*PlatLicenseLog `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Totalcount int64             `protobuf:"varint,2,opt,name=totalcount,proto3" json:"totalcount,omitempty"`
}

func (x *ListLicenseLogReply) Reset() {
	*x = ListLicenseLogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLicenseLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLicenseLogReply) ProtoMessage() {}

func (x *ListLicenseLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_plat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLicenseLogReply.ProtoReflect.Descriptor instead.
func (*ListLicenseLogReply) Descriptor() ([]byte, []int) {
	return file_plat_proto_rawDescGZIP(), []int{26}
}

func (x *ListLicenseLogReply) GetList() []*PlatLicenseLog {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListLicenseLogReply) GetTotalcount() int64 {
	if x != nil {
		return x.Totalcount
	}
	return 0
}

var File_plat_proto protoreflect.FileDescriptor

var file_plat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02,
	0x63, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f, 0x22, 0x74, 0x0a, 0x06, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x6f, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x6f, 0x73, 0x73, 0x22, 0x47, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x52, 0x06,
	0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x22, 0x6f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52,
	0x02, 0x63, 0x6f, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x6f,
	0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02,
	0x63, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x15, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3d, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x43, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x4a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x46, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a,
	0x52, 0x02, 0x63, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02,
	0x63, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x1a,
	0x42, 0x75, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62,
	0x6a, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74,
	0x69, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa0, 0x02, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4e,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x74, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5a,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plat_proto_rawDescOnce sync.Once
	file_plat_proto_rawDescData = file_plat_proto_rawDesc
)

func file_plat_proto_rawDescGZIP() []byte {
	file_plat_proto_rawDescOnce.Do(func() {
		file_plat_proto_rawDescData = protoimpl.X.CompressGZIP(file_plat_proto_rawDescData)
	})
	return file_plat_proto_rawDescData
}

var file_plat_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_plat_proto_goTypes = []interface{}{
	(*GetPlatRequest)(nil),               // 0: GetPlatRequest
	(*IpAddr)(nil),                       // 1: IpAddr
	(*GetServerIpReply)(nil),             // 2: GetServerIpReply
	(*AddPlatRequest)(nil),               // 3: AddPlatRequest
	(*PlatReply)(nil),                    // 4: PlatReply
	(*PlatLicense)(nil),                  // 5: PlatLicense
	(*AddPlatLicenseRequest)(nil),        // 6: AddPlatLicenseRequest
	(*ActivePlatInfoRequest)(nil),        // 7: ActivePlatInfoRequest
	(*ActivePlatInfoReply)(nil),          // 8: ActivePlatInfoReply
	(*GetPlatInfoRequest)(nil),           // 9: GetPlatInfoRequest
	(*GetPlatInfoReply)(nil),             // 10: GetPlatInfoReply
	(*GetPlatLicenseInfoRequest)(nil),    // 11: GetPlatLicenseInfoRequest
	(*GetPlatLicenseInfoReply)(nil),      // 12: GetPlatLicenseInfoReply
	(*UpdatePlatInfoRequest)(nil),        // 13: UpdatePlatInfoRequest
	(*UpdatePlatInfoReply)(nil),          // 14: UpdatePlatInfoReply
	(*UpdatePlatLicenseInfoRequest)(nil), // 15: UpdatePlatLicenseInfoRequest
	(*UpdatePlatLicenseInfoReply)(nil),   // 16: UpdatePlatLicenseInfoReply
	(*BuyPlatLicenseCountRequest)(nil),   // 17: BuyPlatLicenseCountRequest
	(*GetPlatDomainRequest)(nil),         // 18: GetPlatDomainRequest
	(*GetPlatDomainReply)(nil),           // 19: GetPlatDomainReply
	(*PlatInfo)(nil),                     // 20: PlatInfo
	(*ListPlatRequest)(nil),              // 21: ListPlatRequest
	(*ListPlatReply)(nil),                // 22: ListPlatReply
	(*GetOamPlatReply)(nil),              // 23: GetOamPlatReply
	(*PlatLicenseLog)(nil),               // 24: PlatLicenseLog
	(*PlatLicenseLogQuery)(nil),          // 25: PlatLicenseLogQuery
	(*ListLicenseLogReply)(nil),          // 26: ListLicenseLogReply
	(*CheckObj)(nil),                     // 27: CheckObj
}
var file_plat_proto_depIdxs = []int32{
	27, // 0: GetPlatRequest.co:type_name -> CheckObj
	1,  // 1: GetServerIpReply.ipaddr:type_name -> IpAddr
	27, // 2: AddPlatRequest.co:type_name -> CheckObj
	20, // 3: AddPlatRequest.plat:type_name -> PlatInfo
	24, // 4: AddPlatRequest.list:type_name -> PlatLicenseLog
	27, // 5: AddPlatLicenseRequest.co:type_name -> CheckObj
	5,  // 6: AddPlatLicenseRequest.list:type_name -> PlatLicense
	27, // 7: ActivePlatInfoRequest.co:type_name -> CheckObj
	27, // 8: GetPlatInfoRequest.co:type_name -> CheckObj
	27, // 9: GetPlatLicenseInfoRequest.co:type_name -> CheckObj
	27, // 10: UpdatePlatInfoRequest.co:type_name -> CheckObj
	27, // 11: UpdatePlatLicenseInfoRequest.co:type_name -> CheckObj
	27, // 12: BuyPlatLicenseCountRequest.co:type_name -> CheckObj
	27, // 13: GetPlatDomainRequest.co:type_name -> CheckObj
	27, // 14: ListPlatRequest.co:type_name -> CheckObj
	20, // 15: ListPlatReply.list:type_name -> PlatInfo
	20, // 16: GetOamPlatReply.plat:type_name -> PlatInfo
	5,  // 17: GetOamPlatReply.list:type_name -> PlatLicense
	27, // 18: PlatLicenseLogQuery.co:type_name -> CheckObj
	24, // 19: ListLicenseLogReply.list:type_name -> PlatLicenseLog
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_plat_proto_init() }
func file_plat_proto_init() {
	if File_plat_proto != nil {
		return
	}
	file_client_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_plat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerIpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPlatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPlatLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePlatInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePlatInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatLicenseInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatLicenseInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlatInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlatInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlatLicenseInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlatLicenseInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyPlatLicenseCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatDomainReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOamPlatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatLicenseLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatLicenseLogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plat_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLicenseLogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plat_proto_goTypes,
		DependencyIndexes: file_plat_proto_depIdxs,
		MessageInfos:      file_plat_proto_msgTypes,
	}.Build()
	File_plat_proto = out.File
	file_plat_proto_rawDesc = nil
	file_plat_proto_goTypes = nil
	file_plat_proto_depIdxs = nil
}
