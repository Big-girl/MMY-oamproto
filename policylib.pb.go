// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: policylib.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 策略下发的请求参数
type ReleasePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 校验参数
	Co *CheckObj `protobuf:"bytes,100,opt,name=co,proto3" json:"co,omitempty"`
	// 操作的数据类型也就是数据表
	Dtype int32 `protobuf:"varint,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	// 上次更新的时间
	Starttime int64 `protobuf:"varint,2,opt,name=starttime,proto3" json:"starttime,omitempty"`
	// 这次对比的最后的时间
	Endtime int64 `protobuf:"varint,3,opt,name=endtime,proto3" json:"endtime,omitempty"`
}

func (x *ReleasePolicyRequest) Reset() {
	*x = ReleasePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePolicyRequest) ProtoMessage() {}

func (x *ReleasePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePolicyRequest.ProtoReflect.Descriptor instead.
func (*ReleasePolicyRequest) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{0}
}

func (x *ReleasePolicyRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *ReleasePolicyRequest) GetDtype() int32 {
	if x != nil {
		return x.Dtype
	}
	return 0
}

func (x *ReleasePolicyRequest) GetStarttime() int64 {
	if x != nil {
		return x.Starttime
	}
	return 0
}

func (x *ReleasePolicyRequest) GetEndtime() int64 {
	if x != nil {
		return x.Endtime
	}
	return 0
}

// 新增策略的相关接口的请求参数
type AddPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 校验参数
	Co *CheckObj `protobuf:"bytes,100,opt,name=co,proto3" json:"co,omitempty"`
	// 操作的数据类型
	Dtype         int32                   `protobuf:"varint,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Leakanalyconf []*LeakAnalyConf        `protobuf:"bytes,2,rep,name=leakanalyconf,proto3" json:"leakanalyconf,omitempty"`
	Proccla       []*ProcessClass         `protobuf:"bytes,3,rep,name=proccla,proto3" json:"proccla,omitempty"`
	Prolib        []*ProcessLibrary       `protobuf:"bytes,4,rep,name=prolib,proto3" json:"prolib,omitempty"`
	Seaweblib     []*SearchWebsiteLibrary `protobuf:"bytes,5,rep,name=seaweblib,proto3" json:"seaweblib,omitempty"`
	Sufflib       []*SuffixLibrary        `protobuf:"bytes,6,rep,name=sufflib,proto3" json:"sufflib,omitempty"`
	Webbcla       []*WebsiteBigClass      `protobuf:"bytes,7,rep,name=webbcla,proto3" json:"webbcla,omitempty"`
	Webcla        []*WebsiteClass         `protobuf:"bytes,8,rep,name=webcla,proto3" json:"webcla,omitempty"`
	Weblib        []*WebsiteLibrary       `protobuf:"bytes,9,rep,name=weblib,proto3" json:"weblib,omitempty"`
	Wordcla       []*WordClass            `protobuf:"bytes,10,rep,name=wordcla,proto3" json:"wordcla,omitempty"`
	Wordlib       []*WordLibrary          `protobuf:"bytes,11,rep,name=wordlib,proto3" json:"wordlib,omitempty"`
	Apphook       string                  `protobuf:"bytes,12,opt,name=apphook,proto3" json:"apphook,omitempty"`
	Appv          string                  `protobuf:"bytes,13,opt,name=appv,proto3" json:"appv,omitempty"`
	Fencclass     []*FencClass            `protobuf:"bytes,14,rep,name=fencclass,proto3" json:"fencclass,omitempty"`
	Fencapp       []*FencApp              `protobuf:"bytes,15,rep,name=fencapp,proto3" json:"fencapp,omitempty"`
	Fencprocess   []*FencProcess          `protobuf:"bytes,16,rep,name=fencprocess,proto3" json:"fencprocess,omitempty"`
}

func (x *AddPolicyRequest) Reset() {
	*x = AddPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPolicyRequest) ProtoMessage() {}

func (x *AddPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddPolicyRequest) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{1}
}

func (x *AddPolicyRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *AddPolicyRequest) GetDtype() int32 {
	if x != nil {
		return x.Dtype
	}
	return 0
}

func (x *AddPolicyRequest) GetLeakanalyconf() []*LeakAnalyConf {
	if x != nil {
		return x.Leakanalyconf
	}
	return nil
}

func (x *AddPolicyRequest) GetProccla() []*ProcessClass {
	if x != nil {
		return x.Proccla
	}
	return nil
}

func (x *AddPolicyRequest) GetProlib() []*ProcessLibrary {
	if x != nil {
		return x.Prolib
	}
	return nil
}

func (x *AddPolicyRequest) GetSeaweblib() []*SearchWebsiteLibrary {
	if x != nil {
		return x.Seaweblib
	}
	return nil
}

func (x *AddPolicyRequest) GetSufflib() []*SuffixLibrary {
	if x != nil {
		return x.Sufflib
	}
	return nil
}

func (x *AddPolicyRequest) GetWebbcla() []*WebsiteBigClass {
	if x != nil {
		return x.Webbcla
	}
	return nil
}

func (x *AddPolicyRequest) GetWebcla() []*WebsiteClass {
	if x != nil {
		return x.Webcla
	}
	return nil
}

func (x *AddPolicyRequest) GetWeblib() []*WebsiteLibrary {
	if x != nil {
		return x.Weblib
	}
	return nil
}

func (x *AddPolicyRequest) GetWordcla() []*WordClass {
	if x != nil {
		return x.Wordcla
	}
	return nil
}

func (x *AddPolicyRequest) GetWordlib() []*WordLibrary {
	if x != nil {
		return x.Wordlib
	}
	return nil
}

func (x *AddPolicyRequest) GetApphook() string {
	if x != nil {
		return x.Apphook
	}
	return ""
}

func (x *AddPolicyRequest) GetAppv() string {
	if x != nil {
		return x.Appv
	}
	return ""
}

func (x *AddPolicyRequest) GetFencclass() []*FencClass {
	if x != nil {
		return x.Fencclass
	}
	return nil
}

func (x *AddPolicyRequest) GetFencapp() []*FencApp {
	if x != nil {
		return x.Fencapp
	}
	return nil
}

func (x *AddPolicyRequest) GetFencprocess() []*FencProcess {
	if x != nil {
		return x.Fencprocess
	}
	return nil
}

// 修改策略的请求参数
type PutPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 校验参数
	Co *CheckObj `protobuf:"bytes,100,opt,name=co,proto3" json:"co,omitempty"`
	// 操作的数据类型
	Dtype         int32                 `protobuf:"varint,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Leakanalyconf *LeakAnalyConf        `protobuf:"bytes,2,opt,name=leakanalyconf,proto3" json:"leakanalyconf,omitempty"`
	Proccla       *ProcessClass         `protobuf:"bytes,3,opt,name=proccla,proto3" json:"proccla,omitempty"`
	Prolib        *ProcessLibrary       `protobuf:"bytes,4,opt,name=prolib,proto3" json:"prolib,omitempty"`
	Seaweblib     *SearchWebsiteLibrary `protobuf:"bytes,5,opt,name=seaweblib,proto3" json:"seaweblib,omitempty"`
	Sufflib       *SuffixLibrary        `protobuf:"bytes,6,opt,name=sufflib,proto3" json:"sufflib,omitempty"`
	Webbcla       *WebsiteBigClass      `protobuf:"bytes,7,opt,name=webbcla,proto3" json:"webbcla,omitempty"`
	Webcla        *WebsiteClass         `protobuf:"bytes,8,opt,name=webcla,proto3" json:"webcla,omitempty"`
	Weblib        *WebsiteLibrary       `protobuf:"bytes,9,opt,name=weblib,proto3" json:"weblib,omitempty"`
	Wordcla       *WordClass            `protobuf:"bytes,10,opt,name=wordcla,proto3" json:"wordcla,omitempty"`
	Wordlib       *WordLibrary          `protobuf:"bytes,11,opt,name=wordlib,proto3" json:"wordlib,omitempty"`
	Apphook       string                `protobuf:"bytes,12,opt,name=apphook,proto3" json:"apphook,omitempty"`
	Appv          string                `protobuf:"bytes,13,opt,name=appv,proto3" json:"appv,omitempty"`
	Fencclass     *FencClass            `protobuf:"bytes,14,opt,name=fencclass,proto3" json:"fencclass,omitempty"`
	Fencapp       *FencApp              `protobuf:"bytes,15,opt,name=fencapp,proto3" json:"fencapp,omitempty"`
	Fencprocess   *FencProcess          `protobuf:"bytes,16,opt,name=fencprocess,proto3" json:"fencprocess,omitempty"`
	// 更新数据的查询条件
	Filter *PolicyQuery `protobuf:"bytes,21,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *PutPolicyRequest) Reset() {
	*x = PutPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutPolicyRequest) ProtoMessage() {}

func (x *PutPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutPolicyRequest.ProtoReflect.Descriptor instead.
func (*PutPolicyRequest) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{2}
}

func (x *PutPolicyRequest) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *PutPolicyRequest) GetDtype() int32 {
	if x != nil {
		return x.Dtype
	}
	return 0
}

func (x *PutPolicyRequest) GetLeakanalyconf() *LeakAnalyConf {
	if x != nil {
		return x.Leakanalyconf
	}
	return nil
}

func (x *PutPolicyRequest) GetProccla() *ProcessClass {
	if x != nil {
		return x.Proccla
	}
	return nil
}

func (x *PutPolicyRequest) GetProlib() *ProcessLibrary {
	if x != nil {
		return x.Prolib
	}
	return nil
}

func (x *PutPolicyRequest) GetSeaweblib() *SearchWebsiteLibrary {
	if x != nil {
		return x.Seaweblib
	}
	return nil
}

func (x *PutPolicyRequest) GetSufflib() *SuffixLibrary {
	if x != nil {
		return x.Sufflib
	}
	return nil
}

func (x *PutPolicyRequest) GetWebbcla() *WebsiteBigClass {
	if x != nil {
		return x.Webbcla
	}
	return nil
}

func (x *PutPolicyRequest) GetWebcla() *WebsiteClass {
	if x != nil {
		return x.Webcla
	}
	return nil
}

func (x *PutPolicyRequest) GetWeblib() *WebsiteLibrary {
	if x != nil {
		return x.Weblib
	}
	return nil
}

func (x *PutPolicyRequest) GetWordcla() *WordClass {
	if x != nil {
		return x.Wordcla
	}
	return nil
}

func (x *PutPolicyRequest) GetWordlib() *WordLibrary {
	if x != nil {
		return x.Wordlib
	}
	return nil
}

func (x *PutPolicyRequest) GetApphook() string {
	if x != nil {
		return x.Apphook
	}
	return ""
}

func (x *PutPolicyRequest) GetAppv() string {
	if x != nil {
		return x.Appv
	}
	return ""
}

func (x *PutPolicyRequest) GetFencclass() *FencClass {
	if x != nil {
		return x.Fencclass
	}
	return nil
}

func (x *PutPolicyRequest) GetFencapp() *FencApp {
	if x != nil {
		return x.Fencapp
	}
	return nil
}

func (x *PutPolicyRequest) GetFencprocess() *FencProcess {
	if x != nil {
		return x.Fencprocess
	}
	return nil
}

func (x *PutPolicyRequest) GetFilter() *PolicyQuery {
	if x != nil {
		return x.Filter
	}
	return nil
}

// 操作类型接口的响应参数：增改删的响应参数
type OperateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 状态码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误消息提示
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 影响行数
	RowsCount int64 `protobuf:"varint,3,opt,name=rowsCount,proto3" json:"rowsCount,omitempty"`
}

func (x *OperateReply) Reset() {
	*x = OperateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateReply) ProtoMessage() {}

func (x *OperateReply) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateReply.ProtoReflect.Descriptor instead.
func (*OperateReply) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{3}
}

func (x *OperateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OperateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OperateReply) GetRowsCount() int64 {
	if x != nil {
		return x.RowsCount
	}
	return 0
}

// 根据条件获取数据的条件结构体的定义
type PolicyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 校验参数
	Co *CheckObj `protobuf:"bytes,200,opt,name=co,proto3" json:"co,omitempty"`
	// 操作的哪一个数据表
	Dtype int32 `protobuf:"varint,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	// 查询条件：比较通用的
	// 主键ID
	Id int64 `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	// 多个主键ID
	Ids []int64 `protobuf:"varint,12,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// 操作类型：增改删->312
	Opr int32 `protobuf:"varint,13,opt,name=opr,proto3" json:"opr,omitempty"`
	// 最后更新时间大于某个时间
	Starttime int64 `protobuf:"varint,14,opt,name=starttime,proto3" json:"starttime,omitempty"`
	// 具体的表查询条件：通用写到这里，具体的查询会在model层做限制
	// 比较灵活的查询条件：具体使用看接口
	Filter map[string]string `protobuf:"bytes,31,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 配置信息：processclass
	Name string `protobuf:"bytes,32,opt,name=name,proto3" json:"name,omitempty"`
	// 配置信息：leak会用到
	Conf string `protobuf:"bytes,33,opt,name=conf,proto3" json:"conf,omitempty"`
	// 配置信息：leak会用到
	Process string `protobuf:"bytes,34,opt,name=process,proto3" json:"process,omitempty"`
	// 配置信息：leak,processLibrary会用到
	Ctltype int32 `protobuf:"varint,35,opt,name=ctltype,proto3" json:"ctltype,omitempty"`
	// 分类id:processLibrary
	Classids []int32 `protobuf:"varint,36,rep,packed,name=classids,proto3" json:"classids,omitempty"`
	// 发行公司：processLibrary
	Company string `protobuf:"bytes,37,opt,name=company,proto3" json:"company,omitempty"`
	// 父级分类id：websiteLibrary
	Fatherclassids []int32 `protobuf:"varint,38,rep,packed,name=fatherclassids,proto3" json:"fatherclassids,omitempty"`
	// 域名:websiteLibrary
	Domain string `protobuf:"bytes,39,opt,name=domain,proto3" json:"domain,omitempty"`
	// 后缀的值:searchwebsiteLibrary
	Suffix string `protobuf:"bytes,40,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// 数据类型：wordClass
	Type int32 `protobuf:"varint,41,opt,name=type,proto3" json:"type,omitempty"`
	// 应用编码：keys
	Keys string `protobuf:"bytes,42,opt,name=keys,proto3" json:"keys,omitempty"`
	// 工具参数
	// 分页参数：当前页数
	Pageindex int64 `protobuf:"varint,51,opt,name=pageindex,proto3" json:"pageindex,omitempty"`
	// 分页参数：返回几条数据
	Pagelimit int64 `protobuf:"varint,52,opt,name=pagelimit,proto3" json:"pagelimit,omitempty"`
}

func (x *PolicyQuery) Reset() {
	*x = PolicyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyQuery) ProtoMessage() {}

func (x *PolicyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyQuery.ProtoReflect.Descriptor instead.
func (*PolicyQuery) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyQuery) GetCo() *CheckObj {
	if x != nil {
		return x.Co
	}
	return nil
}

func (x *PolicyQuery) GetDtype() int32 {
	if x != nil {
		return x.Dtype
	}
	return 0
}

func (x *PolicyQuery) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PolicyQuery) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PolicyQuery) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

func (x *PolicyQuery) GetStarttime() int64 {
	if x != nil {
		return x.Starttime
	}
	return 0
}

func (x *PolicyQuery) GetFilter() map[string]string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *PolicyQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyQuery) GetConf() string {
	if x != nil {
		return x.Conf
	}
	return ""
}

func (x *PolicyQuery) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *PolicyQuery) GetCtltype() int32 {
	if x != nil {
		return x.Ctltype
	}
	return 0
}

func (x *PolicyQuery) GetClassids() []int32 {
	if x != nil {
		return x.Classids
	}
	return nil
}

func (x *PolicyQuery) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *PolicyQuery) GetFatherclassids() []int32 {
	if x != nil {
		return x.Fatherclassids
	}
	return nil
}

func (x *PolicyQuery) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PolicyQuery) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *PolicyQuery) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PolicyQuery) GetKeys() string {
	if x != nil {
		return x.Keys
	}
	return ""
}

func (x *PolicyQuery) GetPageindex() int64 {
	if x != nil {
		return x.Pageindex
	}
	return 0
}

func (x *PolicyQuery) GetPagelimit() int64 {
	if x != nil {
		return x.Pagelimit
	}
	return 0
}

// 获取策略列表的响应参数
type ListPolicyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的数据类型
	Dtype int32 `protobuf:"varint,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	// 符合条件的数据总条数
	Totalcount int32 `protobuf:"varint,2,opt,name=totalcount,proto3" json:"totalcount,omitempty"`
	// 配置数据
	Leakanalyconf []*LeakAnalyConf        `protobuf:"bytes,21,rep,name=leakanalyconf,proto3" json:"leakanalyconf,omitempty"`
	Proccla       []*ProcessClass         `protobuf:"bytes,22,rep,name=proccla,proto3" json:"proccla,omitempty"`
	Prolib        []*ProcessLibrary       `protobuf:"bytes,23,rep,name=prolib,proto3" json:"prolib,omitempty"`
	Seaweblib     []*SearchWebsiteLibrary `protobuf:"bytes,24,rep,name=seaweblib,proto3" json:"seaweblib,omitempty"`
	Sufflib       []*SuffixLibrary        `protobuf:"bytes,25,rep,name=sufflib,proto3" json:"sufflib,omitempty"`
	Webbcla       []*WebsiteBigClass      `protobuf:"bytes,26,rep,name=webbcla,proto3" json:"webbcla,omitempty"`
	Webcla        []*WebsiteClass         `protobuf:"bytes,27,rep,name=webcla,proto3" json:"webcla,omitempty"`
	Weblib        []*WebsiteLibrary       `protobuf:"bytes,28,rep,name=weblib,proto3" json:"weblib,omitempty"`
	Wordcla       []*WordClass            `protobuf:"bytes,29,rep,name=wordcla,proto3" json:"wordcla,omitempty"`
	Wordlib       []*WordLibrary          `protobuf:"bytes,30,rep,name=wordlib,proto3" json:"wordlib,omitempty"`
	Apphook       string                  `protobuf:"bytes,31,opt,name=apphook,proto3" json:"apphook,omitempty"`
	Appv          string                  `protobuf:"bytes,32,opt,name=appv,proto3" json:"appv,omitempty"`
	Fencclass     []*FencClass            `protobuf:"bytes,33,rep,name=fencclass,proto3" json:"fencclass,omitempty"`
	Fencapp       []*FencApp              `protobuf:"bytes,34,rep,name=fencapp,proto3" json:"fencapp,omitempty"`
	Fencprocess   []*FencProcess          `protobuf:"bytes,35,rep,name=fencprocess,proto3" json:"fencprocess,omitempty"`
}

func (x *ListPolicyReply) Reset() {
	*x = ListPolicyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyReply) ProtoMessage() {}

func (x *ListPolicyReply) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyReply.ProtoReflect.Descriptor instead.
func (*ListPolicyReply) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{5}
}

func (x *ListPolicyReply) GetDtype() int32 {
	if x != nil {
		return x.Dtype
	}
	return 0
}

func (x *ListPolicyReply) GetTotalcount() int32 {
	if x != nil {
		return x.Totalcount
	}
	return 0
}

func (x *ListPolicyReply) GetLeakanalyconf() []*LeakAnalyConf {
	if x != nil {
		return x.Leakanalyconf
	}
	return nil
}

func (x *ListPolicyReply) GetProccla() []*ProcessClass {
	if x != nil {
		return x.Proccla
	}
	return nil
}

func (x *ListPolicyReply) GetProlib() []*ProcessLibrary {
	if x != nil {
		return x.Prolib
	}
	return nil
}

func (x *ListPolicyReply) GetSeaweblib() []*SearchWebsiteLibrary {
	if x != nil {
		return x.Seaweblib
	}
	return nil
}

func (x *ListPolicyReply) GetSufflib() []*SuffixLibrary {
	if x != nil {
		return x.Sufflib
	}
	return nil
}

func (x *ListPolicyReply) GetWebbcla() []*WebsiteBigClass {
	if x != nil {
		return x.Webbcla
	}
	return nil
}

func (x *ListPolicyReply) GetWebcla() []*WebsiteClass {
	if x != nil {
		return x.Webcla
	}
	return nil
}

func (x *ListPolicyReply) GetWeblib() []*WebsiteLibrary {
	if x != nil {
		return x.Weblib
	}
	return nil
}

func (x *ListPolicyReply) GetWordcla() []*WordClass {
	if x != nil {
		return x.Wordcla
	}
	return nil
}

func (x *ListPolicyReply) GetWordlib() []*WordLibrary {
	if x != nil {
		return x.Wordlib
	}
	return nil
}

func (x *ListPolicyReply) GetApphook() string {
	if x != nil {
		return x.Apphook
	}
	return ""
}

func (x *ListPolicyReply) GetAppv() string {
	if x != nil {
		return x.Appv
	}
	return ""
}

func (x *ListPolicyReply) GetFencclass() []*FencClass {
	if x != nil {
		return x.Fencclass
	}
	return nil
}

func (x *ListPolicyReply) GetFencapp() []*FencApp {
	if x != nil {
		return x.Fencapp
	}
	return nil
}

func (x *ListPolicyReply) GetFencprocess() []*FencProcess {
	if x != nil {
		return x.Fencprocess
	}
	return nil
}

// 获取单个策略的响应参数
type GetPolicyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的数据类型
	Dtype         int32                 `protobuf:"varint,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Leakanalyconf *LeakAnalyConf        `protobuf:"bytes,2,opt,name=leakanalyconf,proto3" json:"leakanalyconf,omitempty"`
	Proccla       *ProcessClass         `protobuf:"bytes,3,opt,name=proccla,proto3" json:"proccla,omitempty"`
	Prolib        *ProcessLibrary       `protobuf:"bytes,4,opt,name=prolib,proto3" json:"prolib,omitempty"`
	Seaweblib     *SearchWebsiteLibrary `protobuf:"bytes,5,opt,name=seaweblib,proto3" json:"seaweblib,omitempty"`
	Sufflib       *SuffixLibrary        `protobuf:"bytes,6,opt,name=sufflib,proto3" json:"sufflib,omitempty"`
	Webbcla       *WebsiteBigClass      `protobuf:"bytes,7,opt,name=webbcla,proto3" json:"webbcla,omitempty"`
	Webcla        *WebsiteClass         `protobuf:"bytes,8,opt,name=webcla,proto3" json:"webcla,omitempty"`
	Weblib        *WebsiteLibrary       `protobuf:"bytes,9,opt,name=weblib,proto3" json:"weblib,omitempty"`
	Wordcla       *WordClass            `protobuf:"bytes,10,opt,name=wordcla,proto3" json:"wordcla,omitempty"`
	Wordlib       *WordLibrary          `protobuf:"bytes,11,opt,name=wordlib,proto3" json:"wordlib,omitempty"`
	Apphook       string                `protobuf:"bytes,12,opt,name=apphook,proto3" json:"apphook,omitempty"`
	Appv          string                `protobuf:"bytes,13,opt,name=appv,proto3" json:"appv,omitempty"`
	Fencclass     *FencClass            `protobuf:"bytes,14,opt,name=fencclass,proto3" json:"fencclass,omitempty"`
	FencApp       *FencApp              `protobuf:"bytes,15,opt,name=FencApp,proto3" json:"FencApp,omitempty"`
	Fencprocess   *FencProcess          `protobuf:"bytes,16,opt,name=fencprocess,proto3" json:"fencprocess,omitempty"`
}

func (x *GetPolicyReply) Reset() {
	*x = GetPolicyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyReply) ProtoMessage() {}

func (x *GetPolicyReply) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyReply.ProtoReflect.Descriptor instead.
func (*GetPolicyReply) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{6}
}

func (x *GetPolicyReply) GetDtype() int32 {
	if x != nil {
		return x.Dtype
	}
	return 0
}

func (x *GetPolicyReply) GetLeakanalyconf() *LeakAnalyConf {
	if x != nil {
		return x.Leakanalyconf
	}
	return nil
}

func (x *GetPolicyReply) GetProccla() *ProcessClass {
	if x != nil {
		return x.Proccla
	}
	return nil
}

func (x *GetPolicyReply) GetProlib() *ProcessLibrary {
	if x != nil {
		return x.Prolib
	}
	return nil
}

func (x *GetPolicyReply) GetSeaweblib() *SearchWebsiteLibrary {
	if x != nil {
		return x.Seaweblib
	}
	return nil
}

func (x *GetPolicyReply) GetSufflib() *SuffixLibrary {
	if x != nil {
		return x.Sufflib
	}
	return nil
}

func (x *GetPolicyReply) GetWebbcla() *WebsiteBigClass {
	if x != nil {
		return x.Webbcla
	}
	return nil
}

func (x *GetPolicyReply) GetWebcla() *WebsiteClass {
	if x != nil {
		return x.Webcla
	}
	return nil
}

func (x *GetPolicyReply) GetWeblib() *WebsiteLibrary {
	if x != nil {
		return x.Weblib
	}
	return nil
}

func (x *GetPolicyReply) GetWordcla() *WordClass {
	if x != nil {
		return x.Wordcla
	}
	return nil
}

func (x *GetPolicyReply) GetWordlib() *WordLibrary {
	if x != nil {
		return x.Wordlib
	}
	return nil
}

func (x *GetPolicyReply) GetApphook() string {
	if x != nil {
		return x.Apphook
	}
	return ""
}

func (x *GetPolicyReply) GetAppv() string {
	if x != nil {
		return x.Appv
	}
	return ""
}

func (x *GetPolicyReply) GetFencclass() *FencClass {
	if x != nil {
		return x.Fencclass
	}
	return nil
}

func (x *GetPolicyReply) GetFencApp() *FencApp {
	if x != nil {
		return x.FencApp
	}
	return nil
}

func (x *GetPolicyReply) GetFencprocess() *FencProcess {
	if x != nil {
		return x.Fencprocess
	}
	return nil
}

// 泄漏分析配置
type LeakAnalyConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置类型：1：后缀；2：执行进程；3：路径
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 配置的值
	Conf string `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型（增删改查）：这条记录是需要做怎样的处理，保持两个库表之间的一致性
	Opr int32 `protobuf:"varint,4,opt,name=opr,proto3" json:"opr,omitempty"`
	// 程序
	Process string `protobuf:"bytes,5,opt,name=process,proto3" json:"process,omitempty"`
	// 配置控制类型：0：审计；1：管控
	Ctrtype int32 `protobuf:"varint,6,opt,name=ctrtype,proto3" json:"ctrtype,omitempty"`
}

func (x *LeakAnalyConf) Reset() {
	*x = LeakAnalyConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeakAnalyConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeakAnalyConf) ProtoMessage() {}

func (x *LeakAnalyConf) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeakAnalyConf.ProtoReflect.Descriptor instead.
func (*LeakAnalyConf) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{7}
}

func (x *LeakAnalyConf) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LeakAnalyConf) GetConf() string {
	if x != nil {
		return x.Conf
	}
	return ""
}

func (x *LeakAnalyConf) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *LeakAnalyConf) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

func (x *LeakAnalyConf) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *LeakAnalyConf) GetCtrtype() int32 {
	if x != nil {
		return x.Ctrtype
	}
	return 0
}

// 进程的类型
type ProcessClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 描述
	Descs string `protobuf:"bytes,3,opt,name=descs,proto3" json:"descs,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,5,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *ProcessClass) Reset() {
	*x = ProcessClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessClass) ProtoMessage() {}

func (x *ProcessClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessClass.ProtoReflect.Descriptor instead.
func (*ProcessClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessClass) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

func (x *ProcessClass) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *ProcessClass) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 进程配置库
type ProcessLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 进程分类ID：ProcessClass的ID
	Classid int32 `protobuf:"varint,2,opt,name=classid,proto3" json:"classid,omitempty"`
	// 进程名称
	Processname string `protobuf:"bytes,3,opt,name=processname,proto3" json:"processname,omitempty"`
	// 进程的执行文件名
	Process string `protobuf:"bytes,4,opt,name=process,proto3" json:"process,omitempty"`
	// 描述信息
	Descs string `protobuf:"bytes,5,opt,name=descs,proto3" json:"descs,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型（增删改查）：这条记录是需要做怎样的处理，保持两个库表之间的一致性
	Opr int32 `protobuf:"varint,7,opt,name=opr,proto3" json:"opr,omitempty"`
	// 出版公司
	Company string `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`
	// 管控类型
	Ctrtype int32 `protobuf:"varint,9,opt,name=ctrtype,proto3" json:"ctrtype,omitempty"`
}

func (x *ProcessLibrary) Reset() {
	*x = ProcessLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessLibrary) ProtoMessage() {}

func (x *ProcessLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessLibrary.ProtoReflect.Descriptor instead.
func (*ProcessLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessLibrary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessLibrary) GetClassid() int32 {
	if x != nil {
		return x.Classid
	}
	return 0
}

func (x *ProcessLibrary) GetProcessname() string {
	if x != nil {
		return x.Processname
	}
	return ""
}

func (x *ProcessLibrary) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *ProcessLibrary) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

func (x *ProcessLibrary) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *ProcessLibrary) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

func (x *ProcessLibrary) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ProcessLibrary) GetCtrtype() int32 {
	if x != nil {
		return x.Ctrtype
	}
	return 0
}

// 搜索网站的配置库
type SearchWebsiteLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 网站的名称
	Websitename string `protobuf:"bytes,2,opt,name=websitename,proto3" json:"websitename,omitempty"`
	// 开始的规则
	Beginrule string `protobuf:"bytes,3,opt,name=beginrule,proto3" json:"beginrule,omitempty"`
	// 结束的规则
	Endrule string `protobuf:"bytes,4,opt,name=endrule,proto3" json:"endrule,omitempty"`
	// uri解析次数
	Times int64 `protobuf:"varint,5,opt,name=times,proto3" json:"times,omitempty"`
	// 域名
	Domain string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *SearchWebsiteLibrary) Reset() {
	*x = SearchWebsiteLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWebsiteLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWebsiteLibrary) ProtoMessage() {}

func (x *SearchWebsiteLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWebsiteLibrary.ProtoReflect.Descriptor instead.
func (*SearchWebsiteLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{10}
}

func (x *SearchWebsiteLibrary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchWebsiteLibrary) GetWebsitename() string {
	if x != nil {
		return x.Websitename
	}
	return ""
}

func (x *SearchWebsiteLibrary) GetBeginrule() string {
	if x != nil {
		return x.Beginrule
	}
	return ""
}

func (x *SearchWebsiteLibrary) GetEndrule() string {
	if x != nil {
		return x.Endrule
	}
	return ""
}

func (x *SearchWebsiteLibrary) GetTimes() int64 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *SearchWebsiteLibrary) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SearchWebsiteLibrary) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *SearchWebsiteLibrary) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 后缀的配置库
type SuffixLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 后缀值
	Suffix string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// 选中的状态：在租户端的话是否是放行的状态
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// 是否是系统的默认配置：1是，允许租户端自定义数据，会展示系统默认的值，不允许删除系统的配置
	System bool `protobuf:"varint,4,opt,name=system,proto3" json:"system,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *SuffixLibrary) Reset() {
	*x = SuffixLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuffixLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuffixLibrary) ProtoMessage() {}

func (x *SuffixLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuffixLibrary.ProtoReflect.Descriptor instead.
func (*SuffixLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{11}
}

func (x *SuffixLibrary) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SuffixLibrary) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *SuffixLibrary) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SuffixLibrary) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *SuffixLibrary) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *SuffixLibrary) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 网站大类
type WebsiteBigClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *WebsiteBigClass) Reset() {
	*x = WebsiteBigClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteBigClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteBigClass) ProtoMessage() {}

func (x *WebsiteBigClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteBigClass.ProtoReflect.Descriptor instead.
func (*WebsiteBigClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{12}
}

func (x *WebsiteBigClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebsiteBigClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebsiteBigClass) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *WebsiteBigClass) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 网站类
type WebsiteClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 上级分类ID：WebsiteBigClass的ID
	Fatherclassid int32 `protobuf:"varint,3,opt,name=fatherclassid,proto3" json:"fatherclassid,omitempty"`
	// 描述信息
	Descs string `protobuf:"bytes,4,opt,name=descs,proto3" json:"descs,omitempty"`
	// 选中状态
	Status bool `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *WebsiteClass) Reset() {
	*x = WebsiteClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteClass) ProtoMessage() {}

func (x *WebsiteClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteClass.ProtoReflect.Descriptor instead.
func (*WebsiteClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{13}
}

func (x *WebsiteClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebsiteClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebsiteClass) GetFatherclassid() int32 {
	if x != nil {
		return x.Fatherclassid
	}
	return 0
}

func (x *WebsiteClass) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

func (x *WebsiteClass) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WebsiteClass) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *WebsiteClass) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 网站配置库
type WebsiteLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 类ID：WebsiteClass的ID
	Classid int32 `protobuf:"varint,2,opt,name=classid,proto3" json:"classid,omitempty"`
	// 上级分类ID：WebsiteBigClass的ID
	Fatherclassid int32 `protobuf:"varint,3,opt,name=fatherclassid,proto3" json:"fatherclassid,omitempty"`
	// 名称
	Websitename string `protobuf:"bytes,4,opt,name=websitename,proto3" json:"websitename,omitempty"`
	// 域名
	Domain string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	// 描述信息
	Descs string `protobuf:"bytes,6,opt,name=descs,proto3" json:"descs,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,7,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 做同步库表，这个记录是用来做啥操作的
	Opr int32 `protobuf:"varint,8,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *WebsiteLibrary) Reset() {
	*x = WebsiteLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteLibrary) ProtoMessage() {}

func (x *WebsiteLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteLibrary.ProtoReflect.Descriptor instead.
func (*WebsiteLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{14}
}

func (x *WebsiteLibrary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebsiteLibrary) GetClassid() int32 {
	if x != nil {
		return x.Classid
	}
	return 0
}

func (x *WebsiteLibrary) GetFatherclassid() int32 {
	if x != nil {
		return x.Fatherclassid
	}
	return 0
}

func (x *WebsiteLibrary) GetWebsitename() string {
	if x != nil {
		return x.Websitename
	}
	return ""
}

func (x *WebsiteLibrary) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WebsiteLibrary) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

func (x *WebsiteLibrary) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *WebsiteLibrary) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 关键字分类
type WordClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 关键字分类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 区分是文字的类型还是文件的类型：1：文字；2：文件
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *WordClass) Reset() {
	*x = WordClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordClass) ProtoMessage() {}

func (x *WordClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordClass.ProtoReflect.Descriptor instead.
func (*WordClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{15}
}

func (x *WordClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WordClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WordClass) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WordClass) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *WordClass) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 关键字配置库
type WordLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 关键字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 分类ID：WordClass的ID
	Classid int32 `protobuf:"varint,3,opt,name=classid,proto3" json:"classid,omitempty"`
	// 区分是文字的类型还是文件的类型：1：文字；2：文件
	Type int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *WordLibrary) Reset() {
	*x = WordLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordLibrary) ProtoMessage() {}

func (x *WordLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordLibrary.ProtoReflect.Descriptor instead.
func (*WordLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{16}
}

func (x *WordLibrary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WordLibrary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WordLibrary) GetClassid() int32 {
	if x != nil {
		return x.Classid
	}
	return 0
}

func (x *WordLibrary) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WordLibrary) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *WordLibrary) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 文件加密分类
type FencClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 关键字分类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 区分是文字的类型还是文件的类型：1：文字；2：文件
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *FencClass) Reset() {
	*x = FencClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FencClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FencClass) ProtoMessage() {}

func (x *FencClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FencClass.ProtoReflect.Descriptor instead.
func (*FencClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{17}
}

func (x *FencClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FencClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FencClass) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FencClass) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *FencClass) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 文件加密应用
type FencApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 应用码
	Keys string `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
	// 应用名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 分类id
	Classid int32 `protobuf:"varint,4,opt,name=classid,proto3" json:"classid,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *FencApp) Reset() {
	*x = FencApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FencApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FencApp) ProtoMessage() {}

func (x *FencApp) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FencApp.ProtoReflect.Descriptor instead.
func (*FencApp) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{18}
}

func (x *FencApp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FencApp) GetKeys() string {
	if x != nil {
		return x.Keys
	}
	return ""
}

func (x *FencApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FencApp) GetClassid() int32 {
	if x != nil {
		return x.Classid
	}
	return 0
}

func (x *FencApp) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *FencApp) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

// 文件加密进程库
type FencProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 应用编码
	Appkeys string `protobuf:"bytes,2,opt,name=appkeys,proto3" json:"appkeys,omitempty"`
	// 应用名称
	Appname string `protobuf:"bytes,3,opt,name=appname,proto3" json:"appname,omitempty"`
	// 进程名称
	Exename string `protobuf:"bytes,4,opt,name=exename,proto3" json:"exename,omitempty"`
	// 加密标识：默认为2(啥意思呀)
	Encryptflag int32 `protobuf:"varint,5,opt,name=encryptflag,proto3" json:"encryptflag,omitempty"`
	// 文件类型(文件后缀)
	Filetype []string `protobuf:"bytes,6,rep,name=filetype,proto3" json:"filetype,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,21,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型
	Opr int32 `protobuf:"varint,22,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *FencProcess) Reset() {
	*x = FencProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FencProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FencProcess) ProtoMessage() {}

func (x *FencProcess) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FencProcess.ProtoReflect.Descriptor instead.
func (*FencProcess) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{19}
}

func (x *FencProcess) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FencProcess) GetAppkeys() string {
	if x != nil {
		return x.Appkeys
	}
	return ""
}

func (x *FencProcess) GetAppname() string {
	if x != nil {
		return x.Appname
	}
	return ""
}

func (x *FencProcess) GetExename() string {
	if x != nil {
		return x.Exename
	}
	return ""
}

func (x *FencProcess) GetEncryptflag() int32 {
	if x != nil {
		return x.Encryptflag
	}
	return 0
}

func (x *FencProcess) GetFiletype() []string {
	if x != nil {
		return x.Filetype
	}
	return nil
}

func (x *FencProcess) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *FencProcess) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

var File_policylib_proto protoreflect.FileDescriptor

var file_policylib_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x7f, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02,
	0x63, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xa0, 0x05, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52, 0x02, 0x63, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4c, 0x65, 0x61, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x6c,
	0x65, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x27, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x63, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x12, 0x33,
	0x0a, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65, 0x62,
	0x6c, 0x69, 0x62, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x62, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x62, 0x12, 0x2a, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x69, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x65, 0x62,
	0x63, 0x6c, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x06, 0x77, 0x65, 0x62, 0x63, 0x6c, 0x61,
	0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x06, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x12, 0x24, 0x0a, 0x07, 0x77, 0x6f, 0x72,
	0x64, 0x63, 0x6c, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x6f, 0x72,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x61, 0x12,
	0x26, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x69, 0x62, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x6c, 0x69, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x68, 0x6f,
	0x6f, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x70, 0x70, 0x76, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x65, 0x6e, 0x63, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x66, 0x65, 0x6e, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x07, 0x66, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x41, 0x70, 0x70, 0x52, 0x07, 0x66, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xc6, 0x05, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x52,
	0x02, 0x63, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x65, 0x61,
	0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x4c, 0x65, 0x61, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x0d, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x12,
	0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6c,
	0x69, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69,
	0x62, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x65, 0x61,
	0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69,
	0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x62,
	0x12, 0x2a, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x69, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c, 0x61, 0x12, 0x25, 0x0a, 0x06,
	0x77, 0x65, 0x62, 0x63, 0x6c, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x06, 0x77, 0x65, 0x62,
	0x63, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x52, 0x06, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x12, 0x24, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x57, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x63,
	0x6c, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x69, 0x62, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x69, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x76, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x70, 0x76, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x65, 0x6e, 0x63,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x65,
	0x6e, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x66, 0x65, 0x6e, 0x63, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x41, 0x70, 0x70, 0x52, 0x07, 0x66,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x65,
	0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f,
	0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a,
	0x52, 0x02, 0x63, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x70, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x74, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x64, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x64, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x39, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x05, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x65, 0x61, 0x6b, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x63,
	0x6c, 0x61, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61,
	0x12, 0x27, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x12, 0x28,
	0x0a, 0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x62, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x62, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x62,
	0x63, 0x6c, 0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x42, 0x69, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x62, 0x63, 0x6c, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x63, 0x6c, 0x61, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x06, 0x77, 0x65, 0x62, 0x63, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x77,
	0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x06, 0x77, 0x65,
	0x62, 0x6c, 0x69, 0x62, 0x12, 0x24, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x61, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x69, 0x62, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x57, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x69, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x70, 0x70, 0x76, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x70, 0x76,
	0x12, 0x28, 0x0a, 0x09, 0x66, 0x65, 0x6e, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x09, 0x66, 0x65, 0x6e, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x70, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65,
	0x6e, 0x63, 0x41, 0x70, 0x70, 0x52, 0x07, 0x66, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x70, 0x12, 0x2e,
	0x0a, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x83,
	0x05, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x6b, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x4c, 0x65, 0x61, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d,
	0x6c, 0x65, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x27, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x12,
	0x33, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65,
	0x62, 0x6c, 0x69, 0x62, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x62, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x62, 0x12, 0x2a,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x69, 0x67, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x65,
	0x62, 0x63, 0x6c, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x06, 0x77, 0x65, 0x62, 0x63, 0x6c,
	0x61, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x52, 0x06, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x12, 0x24, 0x0a, 0x07, 0x77, 0x6f,
	0x72, 0x64, 0x63, 0x6c, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x6f,
	0x72, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x61,
	0x12, 0x26, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x69, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52,
	0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x69, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x68,
	0x6f, 0x6f, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x68, 0x6f,
	0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x70, 0x70, 0x76, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x65, 0x6e, 0x63, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x65, 0x6e, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x66, 0x65, 0x6e, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x22, 0x0a, 0x07, 0x46, 0x65, 0x6e, 0x63, 0x41, 0x70, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x41, 0x70, 0x70, 0x52, 0x07, 0x46, 0x65, 0x6e,
	0x63, 0x41, 0x70, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x65, 0x6e, 0x63,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x66, 0x65, 0x6e, 0x63, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x6b, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72,
	0x22, 0xea, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x5f, 0x0a, 0x0f,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x69, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x70, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0xb0, 0x01,
	0x0a, 0x0c, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x63,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72,
	0x22, 0xda, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x73, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x70, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x6d, 0x0a,
	0x09, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x89, 0x01, 0x0a,
	0x0b, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x6d, 0x0a, 0x09, 0x46, 0x65, 0x6e, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x6e, 0x63,
	0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x70, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22,
	0xd3, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6f, 0x70, 0x72, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policylib_proto_rawDescOnce sync.Once
	file_policylib_proto_rawDescData = file_policylib_proto_rawDesc
)

func file_policylib_proto_rawDescGZIP() []byte {
	file_policylib_proto_rawDescOnce.Do(func() {
		file_policylib_proto_rawDescData = protoimpl.X.CompressGZIP(file_policylib_proto_rawDescData)
	})
	return file_policylib_proto_rawDescData
}

var file_policylib_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_policylib_proto_goTypes = []interface{}{
	(*ReleasePolicyRequest)(nil), // 0: ReleasePolicyRequest
	(*AddPolicyRequest)(nil),     // 1: AddPolicyRequest
	(*PutPolicyRequest)(nil),     // 2: PutPolicyRequest
	(*OperateReply)(nil),         // 3: OperateReply
	(*PolicyQuery)(nil),          // 4: PolicyQuery
	(*ListPolicyReply)(nil),      // 5: ListPolicyReply
	(*GetPolicyReply)(nil),       // 6: GetPolicyReply
	(*LeakAnalyConf)(nil),        // 7: LeakAnalyConf
	(*ProcessClass)(nil),         // 8: ProcessClass
	(*ProcessLibrary)(nil),       // 9: ProcessLibrary
	(*SearchWebsiteLibrary)(nil), // 10: SearchWebsiteLibrary
	(*SuffixLibrary)(nil),        // 11: SuffixLibrary
	(*WebsiteBigClass)(nil),      // 12: WebsiteBigClass
	(*WebsiteClass)(nil),         // 13: WebsiteClass
	(*WebsiteLibrary)(nil),       // 14: WebsiteLibrary
	(*WordClass)(nil),            // 15: WordClass
	(*WordLibrary)(nil),          // 16: WordLibrary
	(*FencClass)(nil),            // 17: FencClass
	(*FencApp)(nil),              // 18: FencApp
	(*FencProcess)(nil),          // 19: FencProcess
	nil,                          // 20: PolicyQuery.FilterEntry
	(*CheckObj)(nil),             // 21: CheckObj
}
var file_policylib_proto_depIdxs = []int32{
	21, // 0: ReleasePolicyRequest.co:type_name -> CheckObj
	21, // 1: AddPolicyRequest.co:type_name -> CheckObj
	7,  // 2: AddPolicyRequest.leakanalyconf:type_name -> LeakAnalyConf
	8,  // 3: AddPolicyRequest.proccla:type_name -> ProcessClass
	9,  // 4: AddPolicyRequest.prolib:type_name -> ProcessLibrary
	10, // 5: AddPolicyRequest.seaweblib:type_name -> SearchWebsiteLibrary
	11, // 6: AddPolicyRequest.sufflib:type_name -> SuffixLibrary
	12, // 7: AddPolicyRequest.webbcla:type_name -> WebsiteBigClass
	13, // 8: AddPolicyRequest.webcla:type_name -> WebsiteClass
	14, // 9: AddPolicyRequest.weblib:type_name -> WebsiteLibrary
	15, // 10: AddPolicyRequest.wordcla:type_name -> WordClass
	16, // 11: AddPolicyRequest.wordlib:type_name -> WordLibrary
	17, // 12: AddPolicyRequest.fencclass:type_name -> FencClass
	18, // 13: AddPolicyRequest.fencapp:type_name -> FencApp
	19, // 14: AddPolicyRequest.fencprocess:type_name -> FencProcess
	21, // 15: PutPolicyRequest.co:type_name -> CheckObj
	7,  // 16: PutPolicyRequest.leakanalyconf:type_name -> LeakAnalyConf
	8,  // 17: PutPolicyRequest.proccla:type_name -> ProcessClass
	9,  // 18: PutPolicyRequest.prolib:type_name -> ProcessLibrary
	10, // 19: PutPolicyRequest.seaweblib:type_name -> SearchWebsiteLibrary
	11, // 20: PutPolicyRequest.sufflib:type_name -> SuffixLibrary
	12, // 21: PutPolicyRequest.webbcla:type_name -> WebsiteBigClass
	13, // 22: PutPolicyRequest.webcla:type_name -> WebsiteClass
	14, // 23: PutPolicyRequest.weblib:type_name -> WebsiteLibrary
	15, // 24: PutPolicyRequest.wordcla:type_name -> WordClass
	16, // 25: PutPolicyRequest.wordlib:type_name -> WordLibrary
	17, // 26: PutPolicyRequest.fencclass:type_name -> FencClass
	18, // 27: PutPolicyRequest.fencapp:type_name -> FencApp
	19, // 28: PutPolicyRequest.fencprocess:type_name -> FencProcess
	4,  // 29: PutPolicyRequest.filter:type_name -> PolicyQuery
	21, // 30: PolicyQuery.co:type_name -> CheckObj
	20, // 31: PolicyQuery.filter:type_name -> PolicyQuery.FilterEntry
	7,  // 32: ListPolicyReply.leakanalyconf:type_name -> LeakAnalyConf
	8,  // 33: ListPolicyReply.proccla:type_name -> ProcessClass
	9,  // 34: ListPolicyReply.prolib:type_name -> ProcessLibrary
	10, // 35: ListPolicyReply.seaweblib:type_name -> SearchWebsiteLibrary
	11, // 36: ListPolicyReply.sufflib:type_name -> SuffixLibrary
	12, // 37: ListPolicyReply.webbcla:type_name -> WebsiteBigClass
	13, // 38: ListPolicyReply.webcla:type_name -> WebsiteClass
	14, // 39: ListPolicyReply.weblib:type_name -> WebsiteLibrary
	15, // 40: ListPolicyReply.wordcla:type_name -> WordClass
	16, // 41: ListPolicyReply.wordlib:type_name -> WordLibrary
	17, // 42: ListPolicyReply.fencclass:type_name -> FencClass
	18, // 43: ListPolicyReply.fencapp:type_name -> FencApp
	19, // 44: ListPolicyReply.fencprocess:type_name -> FencProcess
	7,  // 45: GetPolicyReply.leakanalyconf:type_name -> LeakAnalyConf
	8,  // 46: GetPolicyReply.proccla:type_name -> ProcessClass
	9,  // 47: GetPolicyReply.prolib:type_name -> ProcessLibrary
	10, // 48: GetPolicyReply.seaweblib:type_name -> SearchWebsiteLibrary
	11, // 49: GetPolicyReply.sufflib:type_name -> SuffixLibrary
	12, // 50: GetPolicyReply.webbcla:type_name -> WebsiteBigClass
	13, // 51: GetPolicyReply.webcla:type_name -> WebsiteClass
	14, // 52: GetPolicyReply.weblib:type_name -> WebsiteLibrary
	15, // 53: GetPolicyReply.wordcla:type_name -> WordClass
	16, // 54: GetPolicyReply.wordlib:type_name -> WordLibrary
	17, // 55: GetPolicyReply.fencclass:type_name -> FencClass
	18, // 56: GetPolicyReply.FencApp:type_name -> FencApp
	19, // 57: GetPolicyReply.fencprocess:type_name -> FencProcess
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_policylib_proto_init() }
func file_policylib_proto_init() {
	if File_policylib_proto != nil {
		return
	}
	file_client_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_policylib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeakAnalyConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWebsiteLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuffixLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteBigClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FencClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FencApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FencProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policylib_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_policylib_proto_goTypes,
		DependencyIndexes: file_policylib_proto_depIdxs,
		MessageInfos:      file_policylib_proto_msgTypes,
	}.Build()
	File_policylib_proto = out.File
	file_policylib_proto_rawDesc = nil
	file_policylib_proto_goTypes = nil
	file_policylib_proto_depIdxs = nil
}
