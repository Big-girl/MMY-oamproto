// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: policylib.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 策略下发的请求参数
type ReleasePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//下发的数据的类型：
	//1：泄漏分析的配置
	//2：进程分类
	//3：进程的配置库
	//4：搜索网站的配置库
	//5：后缀的配置库
	//6：网站大类
	//7：网站类
	//8：网站配置库
	//9：关键字分类
	//10：关键字配置库
	//11：应用程序钩子函数的入口
	//12：引用程序的版本管理
	Type          int32                   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Leakanalyconf []*LeakAnalyConf        `protobuf:"bytes,2,rep,name=leakanalyconf,proto3" json:"leakanalyconf,omitempty"`
	Proccla       []*ProcessClass         `protobuf:"bytes,3,rep,name=proccla,proto3" json:"proccla,omitempty"`
	Prolib        []*ProcessLibrary       `protobuf:"bytes,4,rep,name=prolib,proto3" json:"prolib,omitempty"`
	Seaweblib     []*SearchWebsiteLibrary `protobuf:"bytes,5,rep,name=seaweblib,proto3" json:"seaweblib,omitempty"`
	Sufflib       []*SuffixLibrary        `protobuf:"bytes,6,rep,name=sufflib,proto3" json:"sufflib,omitempty"`
	Webbcla       []*WebsiteBigClass      `protobuf:"bytes,7,rep,name=webbcla,proto3" json:"webbcla,omitempty"`
	Webcla        []*WebsiteClass         `protobuf:"bytes,8,rep,name=webcla,proto3" json:"webcla,omitempty"`
	Weblib        []*WebsiteLibrary       `protobuf:"bytes,9,rep,name=weblib,proto3" json:"weblib,omitempty"`
	Wordcla       []*WordClass            `protobuf:"bytes,10,rep,name=wordcla,proto3" json:"wordcla,omitempty"`
	Wordlib       []*WordLibrary          `protobuf:"bytes,11,rep,name=wordlib,proto3" json:"wordlib,omitempty"`
	Apphook       []*AppHook              `protobuf:"bytes,12,rep,name=apphook,proto3" json:"apphook,omitempty"`
	Appv          []*AppVersion           `protobuf:"bytes,13,rep,name=appv,proto3" json:"appv,omitempty"`
}

func (x *ReleasePolicyRequest) Reset() {
	*x = ReleasePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePolicyRequest) ProtoMessage() {}

func (x *ReleasePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePolicyRequest.ProtoReflect.Descriptor instead.
func (*ReleasePolicyRequest) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{0}
}

func (x *ReleasePolicyRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReleasePolicyRequest) GetLeakanalyconf() []*LeakAnalyConf {
	if x != nil {
		return x.Leakanalyconf
	}
	return nil
}

func (x *ReleasePolicyRequest) GetProccla() []*ProcessClass {
	if x != nil {
		return x.Proccla
	}
	return nil
}

func (x *ReleasePolicyRequest) GetProlib() []*ProcessLibrary {
	if x != nil {
		return x.Prolib
	}
	return nil
}

func (x *ReleasePolicyRequest) GetSeaweblib() []*SearchWebsiteLibrary {
	if x != nil {
		return x.Seaweblib
	}
	return nil
}

func (x *ReleasePolicyRequest) GetSufflib() []*SuffixLibrary {
	if x != nil {
		return x.Sufflib
	}
	return nil
}

func (x *ReleasePolicyRequest) GetWebbcla() []*WebsiteBigClass {
	if x != nil {
		return x.Webbcla
	}
	return nil
}

func (x *ReleasePolicyRequest) GetWebcla() []*WebsiteClass {
	if x != nil {
		return x.Webcla
	}
	return nil
}

func (x *ReleasePolicyRequest) GetWeblib() []*WebsiteLibrary {
	if x != nil {
		return x.Weblib
	}
	return nil
}

func (x *ReleasePolicyRequest) GetWordcla() []*WordClass {
	if x != nil {
		return x.Wordcla
	}
	return nil
}

func (x *ReleasePolicyRequest) GetWordlib() []*WordLibrary {
	if x != nil {
		return x.Wordlib
	}
	return nil
}

func (x *ReleasePolicyRequest) GetApphook() []*AppHook {
	if x != nil {
		return x.Apphook
	}
	return nil
}

func (x *ReleasePolicyRequest) GetAppv() []*AppVersion {
	if x != nil {
		return x.Appv
	}
	return nil
}

// 策略下发的响应参数
type ReleasePolicyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 状态码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误提示
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 一共有几条数据
	RowsCount int64 `protobuf:"varint,3,opt,name=rowsCount,proto3" json:"rowsCount,omitempty"`
}

func (x *ReleasePolicyReply) Reset() {
	*x = ReleasePolicyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePolicyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePolicyReply) ProtoMessage() {}

func (x *ReleasePolicyReply) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePolicyReply.ProtoReflect.Descriptor instead.
func (*ReleasePolicyReply) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{1}
}

func (x *ReleasePolicyReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReleasePolicyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReleasePolicyReply) GetRowsCount() int64 {
	if x != nil {
		return x.RowsCount
	}
	return 0
}

// 泄漏分析配置
type LeakAnalyConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置类型：1：后缀；2：执行进程；3：路径
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 配置的值
	Conf string `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
	// 最后更新时间
	Uptime int64 `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// 操作类型（增删改查）：这条记录是需要做怎样的处理，保持两个库表之间的一致性
	Opr int32 `protobuf:"varint,4,opt,name=opr,proto3" json:"opr,omitempty"`
	// 程序
	Process string `protobuf:"bytes,5,opt,name=process,proto3" json:"process,omitempty"`
	// 配置控制类型：0：审计；1：管控
	Ctrtype int32 `protobuf:"varint,6,opt,name=ctrtype,proto3" json:"ctrtype,omitempty"`
}

func (x *LeakAnalyConf) Reset() {
	*x = LeakAnalyConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeakAnalyConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeakAnalyConf) ProtoMessage() {}

func (x *LeakAnalyConf) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeakAnalyConf.ProtoReflect.Descriptor instead.
func (*LeakAnalyConf) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{2}
}

func (x *LeakAnalyConf) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LeakAnalyConf) GetConf() string {
	if x != nil {
		return x.Conf
	}
	return ""
}

func (x *LeakAnalyConf) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *LeakAnalyConf) GetOpr() int32 {
	if x != nil {
		return x.Opr
	}
	return 0
}

func (x *LeakAnalyConf) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *LeakAnalyConf) GetCtrtype() int32 {
	if x != nil {
		return x.Ctrtype
	}
	return 0
}

// 进程的类型
type ProcessClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 描述
	Descs string `protobuf:"bytes,3,opt,name=descs,proto3" json:"descs,omitempty"`
}

func (x *ProcessClass) Reset() {
	*x = ProcessClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessClass) ProtoMessage() {}

func (x *ProcessClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessClass.ProtoReflect.Descriptor instead.
func (*ProcessClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessClass) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

// 进程配置库
type ProcessLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 进程分类ID：ProcessClass的ID
	Classid int32 `protobuf:"varint,2,opt,name=classid,proto3" json:"classid,omitempty"`
	// 进程名称
	Processname string `protobuf:"bytes,3,opt,name=processname,proto3" json:"processname,omitempty"`
	// 进程的执行文件名
	Process string `protobuf:"bytes,4,opt,name=process,proto3" json:"process,omitempty"`
	// 描述信息
	Descs string `protobuf:"bytes,5,opt,name=descs,proto3" json:"descs,omitempty"`
	// 最后更新时间
	Timestamp string `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 操作类型（增删改查）：这条记录是需要做怎样的处理，保持两个库表之间的一致性
	Opr string `protobuf:"bytes,7,opt,name=opr,proto3" json:"opr,omitempty"`
	// 出版公司
	Company string `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`
	// 管控类型
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ProcessLibrary) Reset() {
	*x = ProcessLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessLibrary) ProtoMessage() {}

func (x *ProcessLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessLibrary.ProtoReflect.Descriptor instead.
func (*ProcessLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessLibrary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessLibrary) GetClassid() int32 {
	if x != nil {
		return x.Classid
	}
	return 0
}

func (x *ProcessLibrary) GetProcessname() string {
	if x != nil {
		return x.Processname
	}
	return ""
}

func (x *ProcessLibrary) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *ProcessLibrary) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

func (x *ProcessLibrary) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ProcessLibrary) GetOpr() string {
	if x != nil {
		return x.Opr
	}
	return ""
}

func (x *ProcessLibrary) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ProcessLibrary) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 搜索网站的配置库
type SearchWebsiteLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 网站的名称
	Websitename string `protobuf:"bytes,2,opt,name=websitename,proto3" json:"websitename,omitempty"`
	// 开始的规则
	Beginrule string `protobuf:"bytes,3,opt,name=beginrule,proto3" json:"beginrule,omitempty"`
	// 结束的规则
	Endrule string `protobuf:"bytes,4,opt,name=endrule,proto3" json:"endrule,omitempty"`
	// uri解析次数
	Times int64 `protobuf:"varint,5,opt,name=times,proto3" json:"times,omitempty"`
	// 域名
	Domain string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *SearchWebsiteLibrary) Reset() {
	*x = SearchWebsiteLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWebsiteLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWebsiteLibrary) ProtoMessage() {}

func (x *SearchWebsiteLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWebsiteLibrary.ProtoReflect.Descriptor instead.
func (*SearchWebsiteLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{5}
}

func (x *SearchWebsiteLibrary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchWebsiteLibrary) GetWebsitename() string {
	if x != nil {
		return x.Websitename
	}
	return ""
}

func (x *SearchWebsiteLibrary) GetBeginrule() string {
	if x != nil {
		return x.Beginrule
	}
	return ""
}

func (x *SearchWebsiteLibrary) GetEndrule() string {
	if x != nil {
		return x.Endrule
	}
	return ""
}

func (x *SearchWebsiteLibrary) GetTimes() int64 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *SearchWebsiteLibrary) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// 后缀的配置库
type SuffixLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 后缀值
	Suffix string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// 选中的状态：在租户端的话是否是放行的状态
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// 是否是系统的默认配置：1是，允许租户端自定义数据，会展示系统默认的值，不允许删除系统的配置
	System int32 `protobuf:"varint,4,opt,name=system,proto3" json:"system,omitempty"`
}

func (x *SuffixLibrary) Reset() {
	*x = SuffixLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuffixLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuffixLibrary) ProtoMessage() {}

func (x *SuffixLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuffixLibrary.ProtoReflect.Descriptor instead.
func (*SuffixLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{6}
}

func (x *SuffixLibrary) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SuffixLibrary) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *SuffixLibrary) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SuffixLibrary) GetSystem() int32 {
	if x != nil {
		return x.System
	}
	return 0
}

// 网站大类
type WebsiteBigClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WebsiteBigClass) Reset() {
	*x = WebsiteBigClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteBigClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteBigClass) ProtoMessage() {}

func (x *WebsiteBigClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteBigClass.ProtoReflect.Descriptor instead.
func (*WebsiteBigClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{7}
}

func (x *WebsiteBigClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebsiteBigClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 网站类
type WebsiteClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 上级分类ID：WebsiteBigClass的ID
	Fatherclassid string `protobuf:"bytes,3,opt,name=fatherclassid,proto3" json:"fatherclassid,omitempty"`
	// 描述信息
	Descs string `protobuf:"bytes,4,opt,name=descs,proto3" json:"descs,omitempty"`
}

func (x *WebsiteClass) Reset() {
	*x = WebsiteClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteClass) ProtoMessage() {}

func (x *WebsiteClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteClass.ProtoReflect.Descriptor instead.
func (*WebsiteClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{8}
}

func (x *WebsiteClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebsiteClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebsiteClass) GetFatherclassid() string {
	if x != nil {
		return x.Fatherclassid
	}
	return ""
}

func (x *WebsiteClass) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

// 网站配置库
type WebsiteLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 类ID：WebsiteClass的ID
	Classid string `protobuf:"bytes,2,opt,name=classid,proto3" json:"classid,omitempty"`
	// 上级分类ID：WebsiteBigClass的ID
	Fatherclassid string `protobuf:"bytes,3,opt,name=fatherclassid,proto3" json:"fatherclassid,omitempty"`
	// 名称
	Websitename string `protobuf:"bytes,4,opt,name=websitename,proto3" json:"websitename,omitempty"`
	// 域名
	Domain string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	// 描述信息
	Descs string `protobuf:"bytes,6,opt,name=descs,proto3" json:"descs,omitempty"`
	// 最后更新时间
	Timestamp string `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 做同步库表，这个记录是用来做啥操作的
	Opr string `protobuf:"bytes,8,opt,name=opr,proto3" json:"opr,omitempty"`
}

func (x *WebsiteLibrary) Reset() {
	*x = WebsiteLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteLibrary) ProtoMessage() {}

func (x *WebsiteLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteLibrary.ProtoReflect.Descriptor instead.
func (*WebsiteLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{9}
}

func (x *WebsiteLibrary) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebsiteLibrary) GetClassid() string {
	if x != nil {
		return x.Classid
	}
	return ""
}

func (x *WebsiteLibrary) GetFatherclassid() string {
	if x != nil {
		return x.Fatherclassid
	}
	return ""
}

func (x *WebsiteLibrary) GetWebsitename() string {
	if x != nil {
		return x.Websitename
	}
	return ""
}

func (x *WebsiteLibrary) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WebsiteLibrary) GetDescs() string {
	if x != nil {
		return x.Descs
	}
	return ""
}

func (x *WebsiteLibrary) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *WebsiteLibrary) GetOpr() string {
	if x != nil {
		return x.Opr
	}
	return ""
}

// 关键字分类
type WordClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 关键字分类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 区分是文字的类型还是文件的类型：1：文字；2：文件
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *WordClass) Reset() {
	*x = WordClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordClass) ProtoMessage() {}

func (x *WordClass) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordClass.ProtoReflect.Descriptor instead.
func (*WordClass) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{10}
}

func (x *WordClass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WordClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WordClass) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 关键字配置库
type WordLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 关键字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 分类ID：WordClass的ID
	Classid int64 `protobuf:"varint,3,opt,name=classid,proto3" json:"classid,omitempty"`
	// 区分是文字的类型还是文件的类型：1：文字；2：文件
	Type int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// 最后更新时间
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WordLibrary) Reset() {
	*x = WordLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordLibrary) ProtoMessage() {}

func (x *WordLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordLibrary.ProtoReflect.Descriptor instead.
func (*WordLibrary) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{11}
}

func (x *WordLibrary) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WordLibrary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WordLibrary) GetClassid() int64 {
	if x != nil {
		return x.Classid
	}
	return 0
}

func (x *WordLibrary) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WordLibrary) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 应用程序钩子函数的入口
type AppHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据比较灵活所有用string返回
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppHook) Reset() {
	*x = AppHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHook) ProtoMessage() {}

func (x *AppHook) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHook.ProtoReflect.Descriptor instead.
func (*AppHook) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{12}
}

func (x *AppHook) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 引用程序的版本管理
type AppVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据比较灵活所有用string返回
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppVersion) Reset() {
	*x = AppVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policylib_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersion) ProtoMessage() {}

func (x *AppVersion) ProtoReflect() protoreflect.Message {
	mi := &file_policylib_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersion.ProtoReflect.Descriptor instead.
func (*AppVersion) Descriptor() ([]byte, []int) {
	return file_policylib_proto_rawDescGZIP(), []int{13}
}

func (x *AppVersion) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_policylib_proto protoreflect.FileDescriptor

var file_policylib_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa0, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x65, 0x61, 0x6b, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x63, 0x6f, 0x6e, 0x66, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x6c, 0x61, 0x12, 0x27, 0x0a,
	0x06, 0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65, 0x62,
	0x6c, 0x69, 0x62, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x52, 0x09, 0x73, 0x65, 0x61, 0x77, 0x65, 0x62, 0x6c, 0x69, 0x62, 0x12, 0x28, 0x0a, 0x07, 0x73,
	0x75, 0x66, 0x66, 0x6c, 0x69, 0x62, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x66, 0x66, 0x6c, 0x69, 0x62, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c, 0x61,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x42, 0x69, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x77, 0x65, 0x62, 0x62, 0x63, 0x6c,
	0x61, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x63, 0x6c, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x06, 0x77, 0x65, 0x62, 0x63, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x6c,
	0x69, 0x62, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x06, 0x77, 0x65, 0x62, 0x6c, 0x69,
	0x62, 0x12, 0x24, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x61, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x63, 0x6c, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x69, 0x62, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x69, 0x62, 0x12,
	0x22, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x07, 0x61, 0x70, 0x70, 0x68,
	0x6f, 0x6f, 0x6b, 0x12, 0x1f, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x76, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x61, 0x70, 0x70, 0x76, 0x22, 0x60, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x77,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x6b, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x74, 0x72, 0x74, 0x79, 0x70, 0x65, 0x22, 0x48,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x67, 0x0a, 0x0d, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22,
	0x35, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x69, 0x67, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x73, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x22, 0x43, 0x0a, 0x09, 0x57, 0x6f, 0x72,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7d,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1d, 0x0a,
	0x07, 0x41, 0x70, 0x70, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x0a,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_policylib_proto_rawDescOnce sync.Once
	file_policylib_proto_rawDescData = file_policylib_proto_rawDesc
)

func file_policylib_proto_rawDescGZIP() []byte {
	file_policylib_proto_rawDescOnce.Do(func() {
		file_policylib_proto_rawDescData = protoimpl.X.CompressGZIP(file_policylib_proto_rawDescData)
	})
	return file_policylib_proto_rawDescData
}

var file_policylib_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_policylib_proto_goTypes = []interface{}{
	(*ReleasePolicyRequest)(nil), // 0: ReleasePolicyRequest
	(*ReleasePolicyReply)(nil),   // 1: ReleasePolicyReply
	(*LeakAnalyConf)(nil),        // 2: LeakAnalyConf
	(*ProcessClass)(nil),         // 3: ProcessClass
	(*ProcessLibrary)(nil),       // 4: ProcessLibrary
	(*SearchWebsiteLibrary)(nil), // 5: SearchWebsiteLibrary
	(*SuffixLibrary)(nil),        // 6: SuffixLibrary
	(*WebsiteBigClass)(nil),      // 7: WebsiteBigClass
	(*WebsiteClass)(nil),         // 8: WebsiteClass
	(*WebsiteLibrary)(nil),       // 9: WebsiteLibrary
	(*WordClass)(nil),            // 10: WordClass
	(*WordLibrary)(nil),          // 11: WordLibrary
	(*AppHook)(nil),              // 12: AppHook
	(*AppVersion)(nil),           // 13: AppVersion
}
var file_policylib_proto_depIdxs = []int32{
	2,  // 0: ReleasePolicyRequest.leakanalyconf:type_name -> LeakAnalyConf
	3,  // 1: ReleasePolicyRequest.proccla:type_name -> ProcessClass
	4,  // 2: ReleasePolicyRequest.prolib:type_name -> ProcessLibrary
	5,  // 3: ReleasePolicyRequest.seaweblib:type_name -> SearchWebsiteLibrary
	6,  // 4: ReleasePolicyRequest.sufflib:type_name -> SuffixLibrary
	7,  // 5: ReleasePolicyRequest.webbcla:type_name -> WebsiteBigClass
	8,  // 6: ReleasePolicyRequest.webcla:type_name -> WebsiteClass
	9,  // 7: ReleasePolicyRequest.weblib:type_name -> WebsiteLibrary
	10, // 8: ReleasePolicyRequest.wordcla:type_name -> WordClass
	11, // 9: ReleasePolicyRequest.wordlib:type_name -> WordLibrary
	12, // 10: ReleasePolicyRequest.apphook:type_name -> AppHook
	13, // 11: ReleasePolicyRequest.appv:type_name -> AppVersion
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_policylib_proto_init() }
func file_policylib_proto_init() {
	if File_policylib_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policylib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePolicyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeakAnalyConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWebsiteLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuffixLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteBigClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policylib_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policylib_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_policylib_proto_goTypes,
		DependencyIndexes: file_policylib_proto_depIdxs,
		MessageInfos:      file_policylib_proto_msgTypes,
	}.Build()
	File_policylib_proto = out.File
	file_policylib_proto_rawDesc = nil
	file_policylib_proto_goTypes = nil
	file_policylib_proto_depIdxs = nil
}
